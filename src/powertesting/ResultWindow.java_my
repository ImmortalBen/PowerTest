package powertesting;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;

import org.eclipse.jface.action.StatusLineManager;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.widgets.Table;

import outputProcessing.Calculator;

import org.eclipse.swt.widgets.Combo;
import org.eclipse.jface.viewers.ComboViewer;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.Text;

public class ResultWindow extends ApplicationWindow {
	private Table table;
	private Text text;
	private int PID;
	private int[] totalUserCPU = new int[10];
	private int[] totalSystemCPU = new int[10];
	private int[] AUACPU = new int[10];
	private String[] VSS = new String[10];
	private String[] RSS = new String[10];
	private int[] GlobFreeMem = new int[10];
	private int[] GlobMapMem = new int[10];
	private int[] GlobAnonMem = new int[10];
	private int[] GlobSlabMem = new int[10];
	/**
	 * Create the application window,
	 */
	public ResultWindow() {
		super(null);
		createActions();
		addStatusLine();
	}

	/**
	 * Create contents of the application window.
	 * @param parent
	 */
	@Override
	protected Control createContents(Composite parent) {
		Composite container = new Composite(parent, SWT.NONE);
		GridLayout gridlayout = new GridLayout(2, false);
		gridlayout.marginHeight = 0;
		gridlayout.marginWidth = 0;
		container.setLayout(gridlayout);
		
		Label image = new Label(container, SWT.CENTER);
		image.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 2, 1));
		Image imagefile = new Image(null, "icon\\jnu.jpg");
		image.setImage(imagefile);
		
		CTabFolder body = new CTabFolder(container, SWT.NONE);
		body.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
		
		
		CTabItem tbtmCpuPower = new CTabItem(body, SWT.NONE);
		tbtmCpuPower.setText("CPU Power");
		text = new Text(body, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL |SWT.READ_ONLY);
		tbtmCpuPower.setControl(text);
		
		for(int i=0; i<Calculator.MethodPowerData.size(); i++){
			  text.append(Calculator.MethodPowerData.get(i));
		}
		
		CTabItem tbtmLcdPower = new CTabItem(body, SWT.NONE);
		tbtmLcdPower.setText("LCD Power");
		String outputPath = "C:\\Users\\benyin\\Documents\\Graduation_Paper\\Data";
		try {
			getCPUInfo(outputPath);
			getVMStatInfor(outputPath);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		return container;
	}

	/**
	 * Create the actions.
	 */
	private void createActions() {
		// Create the actions
	}

	
	/**
	 * Create the status line manager.
	 * @return the status line manager
	 */
	@Override
	protected StatusLineManager createStatusLineManager() {
		StatusLineManager statusLineManager = new StatusLineManager();
		return statusLineManager;
	}

	/**
	 * Launch the application.
	 * @param args
	 */
	public static void main(String args[]) {
		try {
			ResultWindow window = new ResultWindow();
			window.setBlockOnOpen(true);
			window.open();
			Display.getCurrent().dispose();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Configure the shell.
	 * @param newShell
	 */
	@Override
	protected void configureShell(Shell newShell) {
		super.configureShell(newShell);
		newShell.setText("电量测试插件");
	}

	/**
	 * Return the initial size of the window.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(450, 500);
	}

	public void getCPUInfo(String path) throws IOException{
		FileInputStream fis = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		path += "\\top.txt";
		try {
			fis = new FileInputStream(path);
			isr = new InputStreamReader(fis);
			br = new BufferedReader(isr);
			System.out.println("read from: "+path);
			String line = new String();
			int countAUA = 0;
			int countCPU = 0;
			while ((line = br.readLine()) != null) {
				Boolean re = line.matches("User [0-9]+%, System [0-9]+%, IOW [0-9]+%, IRQ [0-9]+%");
				if (re){
					int begin = 0;
					int end = line.indexOf("%");
					totalUserCPU[countCPU] = Integer.parseInt(line.substring(5, end));

					begin = end+10;
					end = line.indexOf("%", end+1);
					totalSystemCPU[countCPU] = Integer.parseInt(line.substring(begin, end));
					countCPU++;
				}
				if (line.indexOf("com.example.l2048") != -1){
					line = line.substring(1);
					String tmpStr[] = line.split(" ");
					PID = Integer.parseInt(tmpStr[2]);
					int ss =0;
					for (int i=1; i<tmpStr.length; i++){						
						if(tmpStr[i].indexOf("%") != -1){
							String AUAStr = tmpStr[i].trim().substring(0,tmpStr[i].indexOf("%"));		
							AUACPU[countAUA]= Integer.parseInt(AUAStr);
						}
						else if(tmpStr[i].indexOf("K") != -1 && ss == 0){
							VSS[countAUA] = tmpStr[i];
							ss = 1;
						}
						else if (tmpStr[i].indexOf("K") != -1 && ss == 1){
							RSS[countAUA] = tmpStr[i];
							ss = 0;
						}						
					}					
					countAUA++;
				}
			}
				
			System.out.println("Total User CPU: "+totalUserCPU[5]);
			System.out.println("Total System CPU: "+totalSystemCPU[5]);
			System.out.println("AUACPU: "+AUACPU[5]);
			System.out.println("VSS: "+VSS[5]);
			System.out.println("RSS: "+RSS[5]);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			System.out.println("找不到指定文件");
			e.printStackTrace();
		}
	}
	
	public void getVMStatInfor(String path) throws IOException{
		FileInputStream fis = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		path += "\\vmstat.txt";
		try {
			fis = new FileInputStream(path);
			isr = new InputStreamReader(fis);
			br = new BufferedReader(isr);
			System.out.println("read from: "+path);
			String line = new String();
			while ((line = br.readLine()) != null) {
				Boolean re = line.matches(" r  b    free mapped   anon   slab    in   cs  flt  us ni sy id wa ir");
				if (re){
					line = br.readLine();	
					System.out.println(line);
					for (int i=0; i<10; i++){
						line = br.readLine();
						String[] memArray = line.split(" ");
						int count = 0;
						for (int j=0; j<memArray.length; j++){
							if(memArray[j].matches("[0-9]+")){
								if (count == 2){
									GlobFreeMem[i] = Integer.parseInt(memArray[j]);
								}
								else if (count == 3){
									GlobMapMem[i] = Integer.parseInt(memArray[j]);
								}
								else if (count == 4){
									GlobAnonMem[i] = Integer.parseInt(memArray[j]);
								}
								else if (count == 5){
									GlobSlabMem[i] = Integer.parseInt(memArray[j]);
								}
								count++;
							}
						}
						line = br.readLine();
					}
					System.out.println("GLOBAL FREE MEM: "+GlobFreeMem[9]);
					System.out.println("GLOBAL MAPPED MEM: "+GlobMapMem[9]);
					System.out.println("GLOBAL ANON MEM: "+GlobAnonMem[9]);
					System.out.println("GLOBAL SLAB MEM: "+GlobSlabMem[9]);
					break;
				}
				
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			System.out.println("找不到指定文件");
			e.printStackTrace();
		}
	}
	
}

		String outputPath = new String();
		outputPath = CalculateWindow_Manual.outputPath == null 
				? "C:\\Users\\benyin\\Documents\\Graduation_Paper\\Data" : CalculateWindow_Manual.outputPath;
		try {
			getCPUInfo(outputPath);
			getVMStatInfor(outputPath);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		text.append("Average User CPU:"+String.valueOf(totalUserCPU[0])+"%");
		text.append("Average System CPU:"+String.valueOf(totalSystemCPU[0])+"%");